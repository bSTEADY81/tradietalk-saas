generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Main application models
enum SubscriptionTier {
    FREE
    BASIC
    PRO
    ENTERPRISE
}

enum QuoteStatus {
    DRAFT
    SENT
    ACCEPTED
    REJECTED
    EXPIRED
}

enum TradeType {
    CONCRETE
    TILING
    PAINTING
    LANDSCAPING
    BUILDING
    PLUMBING
    ELECTRICAL
    CARPENTRY
    ROOFING
    OTHER
}

model User {
    id                String            @id @default(cuid())
    name              String?
    email             String            @unique
    emailVerified     DateTime?
    image             String?
    password          String?
    subscriptionTier  SubscriptionTier  @default(FREE)
    
    // Relations
    accounts          Account[]
    sessions          Session[]
    businessSettings  BusinessSettings?
    quotes            Quote[]
    templates         Template[]
    subscription      Subscription?
    
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt
}

model BusinessSettings {
    id              String   @id @default(cuid())
    userId          String   @unique
    companyName     String?
    companyLogo     String?
    address         String?
    phone           String?
    email           String?
    abn             String?
    customBranding  Boolean  @default(false)
    
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Quote {
    id                String      @id @default(cuid())
    quoteNumber       String      @unique
    userId            String
    
    // Job details
    jobTitle          String
    clientName        String
    clientEmail       String?
    clientPhone       String?
    clientAddress     String?
    
    // Trade and template
    tradeType         TradeType
    templateId        String?
    
    // Measurements and pricing
    measurements      Json?       // Store measurements as flexible JSON
    baseRate          Float?      // Rate per unit (e.g., per m²)
    area              Float?      // Calculated area
    baseCost          Float       // area × rate
    markupPercentage  Float       @default(0)
    markupAmount      Float       @default(0)
    extras            Json?       // Additional items as JSON array
    subtotal          Float
    gstAmount         Float       // 10% GST
    totalAmount       Float
    
    // Additional info
    notes             String?
    status            QuoteStatus @default(DRAFT)
    voiceRecordingUrl String?
    
    // Relations
    user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    template          Template?   @relation(fields: [templateId], references: [id])
    photos            Photo[]
    
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt
}

model Template {
    id                String    @id @default(cuid())
    userId            String?   // null for system templates
    name              String
    tradeType         TradeType
    description       String?
    defaultRate       Float?    // Default rate for this trade
    defaultMarkup     Float?    // Default markup percentage
    isSystemTemplate  Boolean   @default(false)
    isActive          Boolean   @default(true)
    
    // Template configuration as JSON
    configuration     Json?     // Store template-specific config
    
    // Relations
    user              User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    quotes            Quote[]
    
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
}

model Photo {
    id        String   @id @default(cuid())
    quoteId   String
    url       String
    caption   String?
    order     Int      @default(0)
    
    quote     Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
    
    createdAt DateTime @default(now())
}

model Subscription {
    id                    String           @id @default(cuid())
    userId                String           @unique
    tier                  SubscriptionTier
    status                String           // active, canceled, past_due, etc.
    stripePriceId         String?
    stripeCustomerId      String?
    stripeSubscriptionId  String?
    currentPeriodStart    DateTime?
    currentPeriodEnd      DateTime?
    
    user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    createdAt             DateTime         @default(now())
    updatedAt             DateTime         @updatedAt
}
